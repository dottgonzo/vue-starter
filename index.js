"use strict";
var inquirer = require("inquirer");
var fs = require("fs");
var Promise = require("bluebird");
var pathExists = require("path-exists");
var _ = require("lodash");
var async = require("async");
var exec = require("promised-exec");
var cordovadir = "/tmp/cordova" + new Date().getTime();
var vuedir = "/tmp/vue" + new Date().getTime();
var gitrepo = false;
if (pathExists.sync("./.git/config")) {
    var gitcontent = fs.readFileSync("./.git/config").toString("utf-8").replace(/\t/g, '').split('\n');
    for (var i = 0; i < gitcontent.length; i++) {
        if (gitcontent[i].split('@').length > 1) {
            gitrepo = gitcontent[i].split('url = ')[1];
        }
    }
}
var questions = [
    {
        type: 'list',
        name: 'app',
        message: 'For leaving a comment, you get a freebie',
        choices: ['web', 'mobile', 'multi', 'desktop'],
        when: function (answers) {
            return answers.comments !== 'Nope, all good!';
        }
    },
    {
        type: 'input',
        name: 'name',
        message: 'Insert App name',
        validate: function (value) {
            var pass = 'Please enter a valid phone number';
            if (value) {
                pass = true;
            }
            return pass;
        }
    },
    {
        type: 'checkbox',
        message: 'Select platforms',
        name: 'platforms',
        when: function (answers) {
            return answers.app === 'multi';
        },
        choices: [
            {
                name: 'Browser'
            },
            {
                name: 'iOS'
            },
            {
                name: 'Android'
            },
            {
                name: 'Desktop'
            }
        ],
        validate: function (answer) {
            var a = true;
            if (answer.length < 1) {
                a = 'You must choose at least one topping.';
            }
            return a;
        }
    },
    {
        type: 'checkbox',
        message: 'Select mobile platforms',
        name: 'mobile',
        when: function (answers) {
            return answers.app === 'mobile';
        },
        choices: [
            {
                name: 'iOSMobile'
            },
            {
                name: 'Android'
            }
        ],
        validate: function (answer) {
            var a = true;
            if (answer.length < 1) {
                a = 'You must choose at least one topping.';
            }
            return a;
        }
    },
    {
        type: 'confirm',
        name: 'confirm',
        message: 'do you wan to confirm? (Y/n)',
        default: false,
        validate: function (value) {
            var ret = false;
            if (value == "yes" || value == "Yes" || value == "y" || value == "Y") {
                ret = true;
            }
            return ret;
        }
    }
];
var dir;
if (!gitrepo) {
    questions.push({
        name: "repository",
        type: "input",
        message: "Insert repository",
        validate: function (value) {
            if (value.split("@").length > 1 || value.split("ttp://") > 1) {
                return true;
            }
            return 'Please enter a valid repository';
        }
    });
}
else {
    dir = __dirname;
}
function prompt() {
    return new Promise(function (resolve, reject) {
        inquirer.prompt(questions).then(function (answers) {
            resolve(answers);
        }).catch(function (err) {
            throw Error(err);
        });
    });
}
prompt().then(function (a) {
    if (a.confirm) {
        if (!dir)
            dir = __dirname + '/' + a.name;
        switch (a.app) {
            case "multi":
                exec("cordova create " + a.name + " online.kernel." + name + " " + name).then(function () {
                    var platforms = [];
                    _.map(a.platforms, function (p) {
                        if (p.toLowerCase() === "browser" || p.toLowerCase() === "ios" || p.toLowerCase() === "android")
                            platforms.push(p.toLowerCase());
                    });
                    async.eachSeries(platforms, function (pla, cb) {
                        exec("cordova add " + pla + " --save").then(function () {
                            cb();
                        }).catch(function (err) {
                            cb(err);
                        });
                    }, function (err) {
                        if (err) {
                            throw err;
                        }
                        else {
                            exec("cp -a " + __dirname + "/vuekit" + dir).then(function () {
                                exec("cd " + dir + " npm i").then(function () {
                                    console.log("all done for now");
                                }).catch(function (err) {
                                    throw err;
                                });
                            }).catch(function (err) {
                                throw err;
                            });
                        }
                    });
                }).catch(function (err) {
                    throw err;
                });
                break;
            default:
                console.log("todoooo");
                break;
        }
    }
    else {
        console.log("Exit!");
    }
});

//# sourceMappingURL=data:application/json;base64,
