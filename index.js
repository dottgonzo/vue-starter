"use strict";
var inquirer = require("inquirer");
var fs = require("fs");
var Promise = require("bluebird");
var pathExists = require("path-exists");
var gitrepo = false;
if (pathExists.sync("./.git/config")) {
    var gitcontent = fs.readFileSync("./.git/config").toString("utf-8").replace(/\t/g, '').split('\n');
    for (var i = 0; i < gitcontent.length; i++) {
        if (gitcontent[i].split('@').length > 1) {
            gitrepo = gitcontent[i].split('url = ')[1];
        }
    }
}
var questions = [
    {
        type: 'list',
        name: 'app',
        message: 'For leaving a comment, you get a freebie',
        choices: ['web', 'mobile', 'multi', 'desktop'],
        when: function (answers) {
            return answers.comments !== 'Nope, all good!';
        }
    },
    {
        type: 'confirm',
        name: 'confirm',
        message: 'do you wan to confirm? (Y/n)',
        default: false,
        validate: function (value) {
            var ret = false;
            if (value == "yes" || value == "Yes" || value == "y" || value == "Y") {
                ret = true;
            }
            return ret;
        }
    }
];
if (!gitrepo) {
    questions.push({
        name: "repository",
        type: "input",
        message: "Insert repository",
        validate: function (value) {
            if (value.split("@").length > 1 || value.split("ttp://") > 1) {
                return true;
            }
            return 'Please enter a valid repository';
        }
    });
}
function prompt() {
    return new Promise(function (resolve, reject) {
        inquirer.prompt(questions).then(function (answers) {
            resolve(answers);
        }).catch(function (err) {
            throw Error(err);
        });
    });
}
prompt().then(function (a) {
    console.log("answer: " + a);
    console.log(a);
});

//# sourceMappingURL=data:application/json;base64,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QUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLE9BQU87WUFFL0MsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUc7WUFDcEIsTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFbkIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUVMLENBQUM7QUFHRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxHQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFHakIsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCAqIGFzIGlucXVpcmVyIGZyb20gXCJpbnF1aXJlclwiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gXCJibHVlYmlyZFwiO1xuaW1wb3J0ICogYXMgcGF0aEV4aXN0cyBmcm9tIFwicGF0aC1leGlzdHNcIjtcblxuXG5cbmludGVyZmFjZSBJcXVlc3Rpb24ge1xuXG4gIHR5cGU6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGNob2ljZXM/OiBhbnlbXTtcbiAgZGVmYXVsdD86IGFueTtcbiAgdmFsaWRhdGU/OiBGdW5jdGlvbjtcbiAgZmlsdGVyPzogYW55O1xuICB3aGVuPzogRnVuY3Rpb247XG5cbn1cblxuXG5cbmxldCBnaXRyZXBvOiBhbnkgPSBmYWxzZTtcblxuXG5pZiAocGF0aEV4aXN0cy5zeW5jKFwiLi8uZ2l0L2NvbmZpZ1wiKSkge1xuXG5cbiAgbGV0IGdpdGNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoXCIuLy5naXQvY29uZmlnXCIpLnRvU3RyaW5nKFwidXRmLThcIikucmVwbGFjZSgvXFx0L2csICcnKS5zcGxpdCgnXFxuJyk7XG5cblxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZ2l0Y29udGVudC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChnaXRjb250ZW50W2ldLnNwbGl0KCdAJykubGVuZ3RoID4gMSkge1xuICAgICAgZ2l0cmVwbyA9IGdpdGNvbnRlbnRbaV0uc3BsaXQoJ3VybCA9ICcpWzFdO1xuICAgIH1cbiAgfVxufVxuXG5sZXQgcXVlc3Rpb25zID0gPElxdWVzdGlvbltdPltcblxuXG5cbiAge1xuICAgIHR5cGU6ICdsaXN0JyxcbiAgICBuYW1lOiAnYXBwJyxcbiAgICBtZXNzYWdlOiAnRm9yIGxlYXZpbmcgYSBjb21tZW50LCB5b3UgZ2V0IGEgZnJlZWJpZScsXG4gICAgY2hvaWNlczogWyd3ZWInLCAnbW9iaWxlJywgJ211bHRpJywgJ2Rlc2t0b3AnXSxcbiAgICB3aGVuOiBmdW5jdGlvbiAoYW5zd2Vycykge1xuICAgICAgcmV0dXJuIGFuc3dlcnMuY29tbWVudHMgIT09ICdOb3BlLCBhbGwgZ29vZCEnO1xuICAgIH1cbiAgfSxcbiAge1xuICAgIHR5cGU6ICdjb25maXJtJyxcbiAgICBuYW1lOiAnY29uZmlybScsXG4gICAgbWVzc2FnZTogJ2RvIHlvdSB3YW4gdG8gY29uZmlybT8gKFkvbiknLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAodmFsdWU6IHN0cmluZyk6IGFueSB7XG4gICAgICBsZXQgcmV0ID0gZmFsc2U7XG4gICAgICBpZiAodmFsdWUgPT0gXCJ5ZXNcIiB8fCB2YWx1ZSA9PSBcIlllc1wiIHx8IHZhbHVlID09IFwieVwiIHx8IHZhbHVlID09IFwiWVwiKSB7XG4gICAgICAgIHJldCA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgfVxuXG5dO1xuXG5cblxuXG5pZiAoIWdpdHJlcG8pIHtcblxuICBxdWVzdGlvbnMucHVzaCh7XG4gICAgbmFtZTogXCJyZXBvc2l0b3J5XCIsXG4gICAgdHlwZTogXCJpbnB1dFwiLFxuICAgIG1lc3NhZ2U6IFwiSW5zZXJ0IHJlcG9zaXRvcnlcIixcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKHZhbHVlKTogYW55IHtcblxuICAgICAgaWYgKHZhbHVlLnNwbGl0KFwiQFwiKS5sZW5ndGggPiAxIHx8IHZhbHVlLnNwbGl0KFwidHRwOi8vXCIpID4gMSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICdQbGVhc2UgZW50ZXIgYSB2YWxpZCByZXBvc2l0b3J5JztcbiAgICB9XG5cbiAgfSk7XG5cblxufVxuZnVuY3Rpb24gcHJvbXB0KCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgaW5xdWlyZXIucHJvbXB0KHF1ZXN0aW9ucykudGhlbihmdW5jdGlvbiAoYW5zd2Vycykge1xuXG4gICAgICByZXNvbHZlKGFuc3dlcnMpO1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIHRocm93IEVycm9yKGVycik7XG5cbiAgICB9KTtcbiAgfSk7XG5cbn1cblxuXG5wcm9tcHQoKS50aGVuKGZ1bmN0aW9uIChhKSB7XG4gIGNvbnNvbGUubG9nKFwiYW5zd2VyOiBcIithKTtcblxuICBjb25zb2xlLmxvZyhhKTtcblxuXG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
