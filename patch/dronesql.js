"use strict";
var Promise = require("bluebird");
var kmysql = require("kernelmysql");
function default_1(obj) {
    return new Promise(function (resolve, reject) {
        var Kmysql = new kmysql(obj);
        Kmysql.init();
        var Store = Kmysql.connection;
        var repo_clone;
        var repo_id;
        Store.query('SELECT * FROM `repos` WHERE `repo_name` = "' + obj.repo + '"', function (error, results, fields) {
            if (error) {
                Kmysql.disconnect();
                reject(error);
            }
            else if (results) {
                var repo = JSON.parse(JSON.stringify(results[0]));
                repo_id = repo.repo_id;
                repo_clone = repo.repo_clone.split("//")[0] + "//" + obj.gogs.user + ":" + obj.gogs.password + "@" + repo.repo_clone.split("//")[1];
                console.log(repo_clone);
                console.log(repo_id);
                Store.query('UPDATE repos SET repo_clone = ? WHERE repo_id = ?', [repo_clone, repo_id], function (err, results) {
                    if (error) {
                        reject(error);
                    }
                    else if (results) {
                        console.log(results);
                        resolve(results);
                    }
                    Kmysql.disconnect();
                });
            }
        });
    });
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhdGNoL2Ryb25lc3FsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFZLE9BQU8sV0FBTSxVQUFVLENBQUMsQ0FBQTtBQUVwQyxJQUFPLE1BQU0sV0FBVyxhQUFhLENBQUMsQ0FBQztBQUV2QyxtQkFBeUIsR0FBbUs7SUFDeEwsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLFVBQVUsT0FBTyxFQUFFLE1BQU07UUFHeEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFN0IsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRWQsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUU5QixJQUFJLFVBQVUsQ0FBQztRQUNmLElBQUksT0FBTyxDQUFDO1FBQ1osS0FBSyxDQUFDLEtBQUssQ0FBQyw2Q0FBNkMsR0FBRyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsRUFBRSxVQUFVLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTTtZQUV4RyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNSLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztnQkFDcEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xCLENBQUM7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDakIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xELE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUN2QixVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BJLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBR3JCLEtBQUssQ0FBQyxLQUFLLENBQUMsbURBQW1ELEVBQUUsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLEVBQUUsVUFBVSxHQUFHLEVBQUUsT0FBTztvQkFFMUcsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzt3QkFDUixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7b0JBQ2pCLENBQUM7b0JBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7d0JBQ2pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7d0JBQ3JCLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDckIsQ0FBQztvQkFHRCxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7Z0JBQ3hCLENBQUMsQ0FBQyxDQUFDO1lBQ1AsQ0FBQztRQUlMLENBQUMsQ0FBQyxDQUFDO0lBSVAsQ0FBQyxDQUFDLENBQUE7QUFFTixDQUFDO0FBL0NEOzJCQStDQyxDQUFBIiwiZmlsZSI6InBhdGNoL2Ryb25lc3FsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tIFwiYmx1ZWJpcmRcIjtcblxuaW1wb3J0IGtteXNxbCA9IHJlcXVpcmUoXCJrZXJuZWxteXNxbFwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKG9iajogeyBnb2dzOiB7IHVzZXI6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyB9LCByZXBvOiBzdHJpbmcsIG9yaWdpbjogeyBob3N0OiBzdHJpbmcsIHBvcnQ6IG51bWJlciB9LCBhdXRoOiB7IHBhc3N3b3JkOiBzdHJpbmcsIHVzZXI6IHN0cmluZywgZGF0YWJhc2U6IHN0cmluZyB9IH0pIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXG5cbiAgICAgICAgbGV0IEtteXNxbCA9IG5ldyBrbXlzcWwob2JqKTtcblxuICAgICAgICBLbXlzcWwuaW5pdCgpO1xuXG4gICAgICAgIGxldCBTdG9yZSA9IEtteXNxbC5jb25uZWN0aW9uO1xuXG4gICAgICAgIGxldCByZXBvX2Nsb25lO1xuICAgICAgICBsZXQgcmVwb19pZDtcbiAgICAgICAgU3RvcmUucXVlcnkoJ1NFTEVDVCAqIEZST00gYHJlcG9zYCBXSEVSRSBgcmVwb19uYW1lYCA9IFwiJyArIG9iai5yZXBvICsgJ1wiJywgZnVuY3Rpb24gKGVycm9yLCByZXN1bHRzLCBmaWVsZHMpIHtcblxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgS215c3FsLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlcG8gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHJlc3VsdHNbMF0pKTtcbiAgICAgICAgICAgICAgICByZXBvX2lkID0gcmVwby5yZXBvX2lkO1xuICAgICAgICAgICAgICAgIHJlcG9fY2xvbmUgPSByZXBvLnJlcG9fY2xvbmUuc3BsaXQoXCIvL1wiKVswXSArIFwiLy9cIiArIG9iai5nb2dzLnVzZXIgKyBcIjpcIiArIG9iai5nb2dzLnBhc3N3b3JkICsgXCJAXCIgKyByZXBvLnJlcG9fY2xvbmUuc3BsaXQoXCIvL1wiKVsxXTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXBvX2Nsb25lKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXBvX2lkKTtcblxuXG4gICAgICAgICAgICAgICAgU3RvcmUucXVlcnkoJ1VQREFURSByZXBvcyBTRVQgcmVwb19jbG9uZSA9ID8gV0hFUkUgcmVwb19pZCA9ID8nLCBbcmVwb19jbG9uZSwgcmVwb19pZF0sIGZ1bmN0aW9uIChlcnIsIHJlc3VsdHMpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgIEtteXNxbC5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlcnJvciB3aWxsIGJlIGFuIEVycm9yIGlmIG9uZSBvY2N1cnJlZCBkdXJpbmcgdGhlIHF1ZXJ5IFxuICAgICAgICAgICAgLy8gcmVzdWx0cyB3aWxsIGNvbnRhaW4gdGhlIHJlc3VsdHMgb2YgdGhlIHF1ZXJ5IFxuICAgICAgICAgICAgLy8gZmllbGRzIHdpbGwgY29udGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcmV0dXJuZWQgcmVzdWx0cyBmaWVsZHMgKGlmIGFueSkgXG4gICAgICAgIH0pO1xuXG5cblxuICAgIH0pXG5cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
